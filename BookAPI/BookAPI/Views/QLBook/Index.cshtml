@model IEnumerable<BookAPI.Models.Book>
@{
    ViewBag.Title = "Book List";
    Layout = "~/Views/Shared/_Layout1.cshtml";
}

<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book List</title>
    <style>
        table, th, td {
            border: 1px solid #868585;
        }

        table {
            border-collapse: collapse;
            width: 100%;
        }

        th, td {
            text-align: left;
            padding: 10px;
        }

        table tr:nth-child(odd) {
            background-color: #eee;
        }

        table tr:nth-child(even) {
            background-color: white;
        }

        th.sortable {
            cursor: pointer;
            position: relative;
            padding-right: 20px;
        }

            th.sortable:after {
                content: ' \25B2\25BC'; /* Unicode for up and down arrows */
                position: absolute;
                right: 8px;
                opacity: 0.5;
            }

        th.sorted-asc:after {
            content: ' \25B2'; /* Unicode for up arrow */
        }

        th.sorted-desc:after {
            content: ' \25BC'; /* Unicode for down arrow */
        }
        .tr1 {
            background-color: lightskyblue !important;
            position: -webkit-sticky; /* for Safari */
            position: sticky;
            top: 0;
            z-index: 1;
        }

        .top-search {
            display: flex;
            align-items: center;
            justify-content: space-between;
            border: 4px solid #020d18;
            border-radius: 3px;
            overflow: hidden;
        }

            .top-search select {
                flex: 1;
                height: 46px;
                background-color: black;
                font-family: 'Nunito', sans-serif;
                font-size: 16px;
                color: #abb7c4;
                font-weight: 300;
                border: none;
                padding: 0 10px;
                border-right: 1px solid #020d18;
                text-transform: uppercase;
                padding-right: 30px;
            }

            .top-search input[type="text"] {
                flex: 2;
                height: 46px;
                background-color: #233a50;
                font-family: 'Nunito', sans-serif;
                font-size: 16px;
                color: #000;
                font-weight: 300;
                border: none;
                padding: 0 10px;
                background: url('../images/uploads/topsearch.png') no-repeat right 20px center;
            }

        .search-button {
            height: 46px;
            padding: 0 20px;
            background-color: #3b5998;
            color: #fff;
            border: none;
            border-radius: 0 3px 3px 0;
            cursor: pointer;
        }

            .search-button:hover {
                background-color: #4469b0;
            }

        .mb-4 {
            flex: 1;
            margin: 0 5px;
        }
        .search-input{
            width: 500px;
        }
        
    </style>
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/css/bootstrap.min.css" integrity="sha384-ZenhBwBW9N8IpGlpcoEteNifv8KTjwXk1Am7LkL5MZ9zMNDXOeMyF/+TqMziT25C" crossorigin="anonymous">
</head>
<body>
    <div class="container mt-4">
        <div style="display: flex; margin-bottom:20px">
            <h1 class="mb-4">Book List</h1>
            <form class="mb-4" method="post" action="~/QLBook/SubmitInputAsync">
                <div class="top-search">
                    <select>
                        <option value="united">Tìm kiếm bằng tên sách</option>
                        <option value="saab">Tìm kiếm bằng thể loại</option>
                    </select>

                    <input type="text" class="search-input" name="inputString" id="searchInput" placeholder="Nhập từ khóa sách bạn muốn tải về Cơ Sở Dữ Liệu">
                    <button type="submit" class="search-button">Add</button>
                </div>
            </form>

        </div>

        


        <table class="table" id="bookTable">
            <thead>
                <tr class="tr1">
                    <th class="sortable" data-column="Title">
                        Title
                    </th>
                    <th class="sortable" data-column="Description">
                        Description
                    </th>
                    <th class="sortable" data-column="Publisher">
                        Publisher
                    </th>
                    <th class="sortable" data-column="Authors">
                        Authors
                    </th>
                    <th class="sortable" data-column="Categories">
                        Categories
                    </th>
                    <th class="sortable" data-column="PublishedDate">
                        Published Date
                    </th>
                    <th>Book Link</th>
                    <th>Cover Image</th>
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td data-column="Title">@item.Title</td>
                        <td data-column="Description">@item.DescriptionB</td>
                        <td data-column="Publisher">@item.Publisher.PublisherName</td>
                        <td data-column="Authors">
                            @foreach (var author in item.Authors)
                            {
                                @author.AuthorName<br />
                            }
                        </td>
                        <td data-column="Categories">
                            @foreach (var category in item.Categories)
                            {
                                @category.CategoryName<br />
                            }
                        </td>
                        <td data-column="PublishedDate">@item.PublishedDate</td>
                        <td>
                            <a href="@item.BookLink" target="_blank">@item.BookLink</a>
                        </td>
                        <td>
                            <img src="@item.CoverImage" alt="@item.Title Cover Image" class="img-fluid" style="max-width: 100px; max-height: 100px;" />
                        </td>
                        <td>
                            <a class="btn btn-warning btn-outline-secondary" ">Edit</a>
                            <h1></h1>
                            <a class="btn btn-danger btn-outline-secondary" ">Delete</a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="dataTables_paginate paging_simple_numbers" >
            @if (ViewBag.CurrentPage > 1)
            {
                <a class="paginate_button next" href="@Url.Action("Index", "QLBook", new { page = ViewBag.CurrentPage - 1 })">Previous</a>
            }
            <span>
                @for (int i = 1; i <= ViewBag.TotalPages; i++)
                {
                    if (i == ViewBag.CurrentPage)
                    {
                        <a class="paginate_button current">@i</a>
                    }
                    else
                    {
                        <a class="paginate_button" href="@Url.Action("Index", "QLBook", new { page = i })">@i</a>
                    }
                }
            </span>
            @if (ViewBag.CurrentPage < ViewBag.TotalPages)
            {
                <a class="paginate_button next" href="@Url.Action("Index", "QLBook", new { page = ViewBag.CurrentPage + 1 })">Next</a>
            }
        </div>

    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.2.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-OERcA2K8uLyrgkLJQIoizTvJJcofAqzWFOBTYBIbsa8Ubv9yRNk5u14dkzCq2QbEz" crossorigin="anonymous"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const table = document.querySelector('table');
            const headers = table.querySelectorAll('th.sortable');
            let sortOrder = {};

            headers.forEach(header => {
                header.addEventListener('click', function () {
                    const column = this.getAttribute('data-column');
                    const order = sortOrder[column] === 'asc' ? 'desc' : 'asc';

                    sortTableByColumn(table, column, order);
                    sortOrder[column] = order;

                    headers.forEach(h => h.classList.remove('sorted-asc', 'sorted-desc'));
                    this.classList.add(order === 'asc' ? 'sorted-asc' : 'sorted-desc');
                });
            });
        });

        function sortTableByColumn(table, column, order) {
            const tbody = table.querySelector('tbody');
            const rows = Array.from(tbody.querySelectorAll('tr'));

            const compare = (a, b) => {
                const cellA = a.querySelector(`td[data-column="${column}"]`).innerText;
                const cellB = b.querySelector(`td[data-column="${column}"]`).innerText;

                if (cellA < cellB) {
                    return order === 'asc' ? -1 : 1;
                }
                if (cellA > cellB) {
                    return order === 'asc' ? 1 : -1;
                }
                return 0;
            };

            rows.sort(compare);
            tbody.innerHTML = '';

            rows.forEach(row => tbody.appendChild(row));
        }
    </script>

</body>
